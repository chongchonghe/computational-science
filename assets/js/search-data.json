{
  
    
        "post0": {
            "title": "Title",
            "content": "",
            "url": "https://chongchonghe.github.io/computational-science/2022/08/13/Untitled.html",
            "relUrl": "/2022/08/13/Untitled.html",
            "date": " • Aug 13, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Write a Machine Learning Algorithm from Scratch using Python",
            "content": "In this notebook, I demonstrate how to write an image classification algorithm with logistic regression from scratch using Python and achieve high accuracy in the task of Handwritten Digit Recognition. . Dataset . The data we are going to use to train our model is the MNIST handwritten digit database. First, download the images data files from the MNIST database and store them under the data/ directory. In this project, we use 8000 images for training and 2000 for testing. The image files are tables of a large set of images, each consisting of 28^2 pixels and each pixel is a 8-bit integer. . import numpy as np from scipy import special import idx2numpy import matplotlib.pyplot as plt # reduce num_data to increase the speed of the code num_data = 3000 image_size = 28 num_test = num_data // 6 x_train = idx2numpy.convert_from_file(&#39;data/train-images-idx3-ubyte&#39;)[:num_data, :, :].reshape([num_data, image_size * image_size]).T x_test = idx2numpy.convert_from_file(&#39;data/t10k-images-idx3-ubyte&#39;)[:num_test, :, :].reshape([num_test, image_size * image_size]).T y_train = idx2numpy.convert_from_file(&#39;data/train-labels-idx1-ubyte&#39;)[:num_data] y_test = idx2numpy.convert_from_file(&#39;data/t10k-labels-idx1-ubyte&#39;)[:num_test] . Let&#39;s visualize 10 images that is randomly picked. You will see the images match with the labels. . picks = np.random.choice(range(len(y_test)), 10) f, axs = plt.subplots(2, 5, figsize=[14, 6]) for i, ax in enumerate(axs.flatten()): ax.set_aspect(&#39;equal&#39;, &#39;box&#39;) ax.imshow(x_test[:, picks[i]].reshape(image_size, image_size), cmap=&quot;gray&quot;) plt.show() # print(&quot;Labels mod: &quot;, y_test[:, picks].T) print(&quot;Labels: &quot;, y_test[picks]) . Labels: [1 1 9 8 9 0 0 8 4 4] . Training a binary classification model with logistic regression . We begin with a simpler version of the task: binary classification. In a binary classification model, we estimate the probability of some event being true. In this case, we tell if or not an image corresponds to the digit &quot;1&quot;. That means, the model will return 1 if the digit is 1 and 0 otherwise. We keep only 1&#39;s in the labels and the rest is set to zero. In the next section, we will extend the model to recoganizing all 10 digits. . We first reset the labels. . y_train_binary = y_train.copy() y_test_binary = y_test.copy() y_train_binary[y_train_binary != 1] = 0 y_test_binary[y_test_binary != 1] = 0 y_test_binary[picks] . array([1, 1, 0, 0, 0, 0, 0, 0, 0, 0], dtype=uint8) . The training and test datasets are ready to be used in the model. Let us develop the model. . Linear regression . The logistic regression uses the basic linear regression formula that we all learned in high school: $y = a x + b$. In logistic regression variables are expressed in vectors: . $$ z = w^T x + b $$Here $z$ is the output variable, $x$ is the input variable, $w$ and $b$ are model parameters. Here $b$ is scalar and both $x$ and $w$ are column vectores: . $$ { displaystyle { boldsymbol {x}}={ begin{bmatrix}x_{1} x_{2} vdots x_{m} end{bmatrix}} ,.} $$Therefore $w^T x$ means multiply all the elements of $w$ by all the elements of $x$ and add them together. . Sigmoid function . This output z is passed through a non-linear function. The commonly used nonlinear function is the sigmoid function that returns a value between 0 and 1. . $$ y_{ rm predict} equiv a = frac{1}{1 + e^{-z}}. $$ def sigmoid(z): s = 1/(1 + np.exp(-z)) return s . Cost Function . The cost function is a measure of a model that reflects how much the predicted output differs from the original output. The purpose of the training is to reduce the cost function as much as possible. Here is the formula for the cost function of one training example or one row of data: . $$ J(a, y) = - y log a - (1 - y) log (1 - a), $$and the average cost function for all the rows is . $$ J = frac{1}{m} Sigma_{i=1}^{m} J(a, y). $$Here $a$ is the sigmoid function from above and $y$ is the label of the training data: 0 or 1. Note how a large $a$ with $y = 1$ or a small $a$ with $y = 0$ reduces $J$. . A special procedure here is conserved with zero values in the log function. Althrough mathematically $a$ takes values in the range (0, 1), not including 0 or 1, in practice, roundoff error could cause $a = 0$ when $z$ is very small or $a = 1$ when $z$ is large. To avoid J = NaN in the program, we wrap the Sigmoid function in the following functions: (see The way I solve this problem is to evaluate the log of sigmoid via the special.logsumexp function from scipy: log(a(z)) = - special.logsumexp([0, -z]). See this page for details. . def logsig_lin(z): # log(1 / (1 + np.exp(-z)) return - special.logsumexp([0, -z]) def log1minussig_lin(z): # log(1 - 1 / (1 + np.exp(-z)) return -z - special.logsumexp([0, -z]) logsig = np.vectorize(logsig_lin) log1minussig = np.vectorize(log1minussig_lin) . Gradient descent . The goal of model traning is to update the variables w and b in order to reduce the cost function. They would be initialized as zeros but need to be updated later with better values. Gradient descent will help with that. Let’s see how. . We have expressed the cost function as a function of a and y, but it can be expressed as a function of w and b as well, because a is derived from w and b. . $$ frac{ partial J(a, y)}{ partial w} = frac{d J(a, y)}{d a} frac{da}{dz} frac{ partial z}{ partial w} = x(a - y) $$$$ frac{ partial J(a, y)}{ partial w} = frac{d J(a, y)}{d a} frac{da}{dz} frac{ partial z}{ partial b} = a - y $$Therefore, . $$ frac{ partial J}{ partial w} = frac{1}{m} (a - y)^T cdot { bf x} $$$$ frac{ partial J}{ partial b} = frac{1}{m} Sigma_{i=1}^{m} (a - y) $$Now, we can write a function to calculate the derivatives of $J$ given the current parameters, w and b, and training dataset, X and Y: . def propagate(w, b, X, Y): # the number of training data m = X.shape[1] # calculate the predicted output z = np.dot(w.T, X) + b A = sigmoid(z) # calculate the cost function cost = -1/m * np.sum(Y * logsig(z) + (1 - Y) * log1minussig(z)) # calculate the gradients dw = 1/m * np.dot(X, (A - Y).T) db = 1/m * np.sum(A - Y) return dw, db, cost . Optimize the parameters to best fit the training data . def optimize(w, b, X, Y, num_ite, rate): costs = [] for i in range(num_ite): dw, db, cost = propagate(w, b, X, Y) # update w and b y deducting the dw and db times learning rate from the previous values w -= rate * dw b -= rate * db # record the cost function value for each 10 iterations if i % 10 == 0: costs.append(cost) print(&quot;Iteration:&quot;, i) # The final updated parameters and gradients params = {&#39;w&#39;: w, &#39;b&#39;: b} grads = {&quot;dw&quot;: dw, &quot;db&quot;: db} return params, grads, costs . We also need a function to predict the output given the model parameters. . def predict(w, b, X): A = sigmoid(np.dot(w.T, X) + b)[0] # Iterating through A and predict an 1 if the value of A is greater than 0.5 and a 0 otherwise return np.array(A &gt; 0.5, dtype=int) . The final function to do the model and print its accuracy: . dim = x_train.shape[0] # Initializing the w and b as zeros w = np.zeros([dim, 1]) b = 0 num_ite = 100 rate = 0.005 # Train the model params, grads, costs = optimize(w, b, x_train, y_train_binary, num_ite, rate) # Make predictions based on the trained parameters prediction_train = predict(params[&#39;w&#39;], params[&#39;b&#39;], x_train) prediction_test = predict(params[&#39;w&#39;], params[&#39;b&#39;], x_test) # Print out the accuracy print(&quot;train accuracy: {} %&quot;.format(100 - np.mean(np.abs(prediction_train - y_train_binary)) * 100)) print(&quot;test accuracy: {} %&quot;.format(100 - np.mean(np.abs(prediction_test - y_test_binary)) * 100)) print(&quot;Predictions for the picked images:&quot;, prediction_test[picks], &quot;, compared to the labels:&quot;, y_test_binary[picks]) . Iteration: 0 /tmp/ipykernel_76/2922593723.py:2: RuntimeWarning: overflow encountered in exp s = 1/(1 + np.exp(-z)) Iteration: 10 Iteration: 20 Iteration: 30 Iteration: 40 Iteration: 50 Iteration: 60 Iteration: 70 Iteration: 80 Iteration: 90 train accuracy: 99.23333333333333 % test accuracy: 99.0 % Predictions for the picked images: [1 1 0 0 0 0 0 0 0 0] , compared to the labels: [1 1 0 0 0 0 0 0 0 0] . The model achieves 99% accuracy on this simple binary classification task. . Training a multi-class classification model . Now it is time to extend our model capability to do a complete image classification. The idea is to optimize the parameters for each individual catagories, in this case 0, 1, 2, ... 9. In the prediction, we find the catogary with the highest probability (Sigmoid value $a(z)$). . First, rebuild the y data . N = 10 # number of labels y_train_sparse = np.zeros([N, len(y_train)]) for i in range(len(y_train)): y_train_sparse[int(y_train[i]), i] = 1 . and the new optimize and predict function . def propagate_multi(w, b, X, Y): &quot;&quot;&quot; Params: w: (d by N) d is the number of dimensions (pixels), N is the number of catagories (10) b: (N) X: (d by m) m is the number of data Y: (N by m) Return: dw: (d by N) db: (N) cost: (float) &quot;&quot;&quot; # the number of training data m = X.shape[1] # calculate the predicted output z = (np.dot(w.T, X).T + b).T # (N by m) A = sigmoid(z) cost = -1 / (N * m) * np.sum(Y * logsig(z) + (1 - Y) * log1minussig(z)) # calculate the gradients dw = 1/m * np.dot(X, (A - Y).T) # (d by N) db = 1/m * np.sum(A - Y, axis=1) # (N) return dw, db, cost def optimize(w, b, X, Y, num_ite, rate, cost_skip=10): # costs = [] for i in range(num_ite): dw, db, cost = propagate_multi(w, b, X, Y) # update w and b y deducting the dw and db times learning rate from the previous values w -= rate * dw b -= rate * db # record the cost function value for each 100 iterations # if i % 5 == 0: # costs.append(cost) # print(f&quot;Iteration: {i}, cost = {cost}&quot;) # The final updated parameters and gradients params = {&#39;w&#39;: w, &#39;b&#39;: b} grads = {&quot;dw&quot;: dw, &quot;db&quot;: db} return params, grads, cost def predict(w, b, X): A = sigmoid(np.dot(w.T, X).T + b).T # (N by m) return np.argmax(A, axis=0) # (m) . Now, train the model . N = 10 # Initializing the w and b as zeros dim = x_train.shape[0] w = np.zeros([dim, N]) b = np.zeros(N) rate = 0.002 params = {&#39;w&#39;: w, &#39;b&#39;: b} ite_per_cycle = 10 for cycle in range(11): params, grads, costs = optimize(params[&#39;w&#39;], params[&#39;b&#39;], x_train, y_train_sparse, ite_per_cycle, rate) prediction_train = predict(params[&#39;w&#39;], params[&#39;b&#39;], x_train) print(&quot;total number of ite = {}, cost = {}, train accuracy = {} %&quot;.format( (cycle + 1) * ite_per_cycle, costs, np.sum(prediction_train == np.array(y_train, dtype=int)) / len(y_train) * 100)) prediction_test = predict(params[&#39;w&#39;], params[&#39;b&#39;], x_test) print(&quot;test accuracy: {} %&quot;.format(np.sum(prediction_test == np.array(y_test, dtype=int)) / len(y_test) * 100)) print(&quot;Predictions for the picked images:&quot;, prediction_test[picks], &quot;, compared to the labels:&quot;, y_test[picks]) # plt.scatter(cost_skip * np.arange(len(costs)), costs) # plt.gca().set(yscale=&#39;log&#39;) # plt.savefig(&quot;f2.png&quot;, dpi=300) # print(&quot;f2.png: evolution of the costs.&quot;) . /tmp/ipykernel_76/2922593723.py:2: RuntimeWarning: overflow encountered in exp s = 1/(1 + np.exp(-z)) total number of ite = 10, cost = 15.642082022209852, train accuracy = 78.4 % total number of ite = 20, cost = 10.13579121822049, train accuracy = 70.1 % total number of ite = 30, cost = 6.239039228320853, train accuracy = 85.36666666666667 % total number of ite = 40, cost = 3.974493901128094, train accuracy = 87.66666666666667 % total number of ite = 50, cost = 8.038727466800148, train accuracy = 78.56666666666666 % total number of ite = 60, cost = 3.6077143613125293, train accuracy = 82.23333333333333 % total number of ite = 70, cost = 8.519842639119675, train accuracy = 70.16666666666667 % total number of ite = 80, cost = 3.059499345101131, train accuracy = 84.89999999999999 % total number of ite = 90, cost = 3.734900624342142, train accuracy = 87.23333333333333 % total number of ite = 100, cost = 2.4217790069496483, train accuracy = 84.23333333333333 % total number of ite = 110, cost = 2.2079684099530934, train accuracy = 91.26666666666667 % test accuracy: 83.8 % Predictions for the picked images: [1 1 9 8 9 0 0 3 4 4] , compared to the labels: [1 1 9 8 9 0 0 8 4 4] . The model achieves 91% accuracy on the training dataset and 84% accuracy on the test sample. . Why does it work? . How could such a simple model achieve such high accuracy in classifying handwritten digits, given the high complexity and variation in the handwritten digits? We can have an appreciation of how it works by taking a visualization of the weight. Recall the each weight correponds to how much each of the input pixels are taken into account. By reshaping the wegiths into a 28 by 28 image, we can tell what pixels are most important and least important: . plt.figure(figsize=[12, 5]) for i in range(N): plt.subplot(2, 5, i+1) weight = params[&#39;w&#39;][:, i].reshape([image_size, image_size]) plt.title(i) plt.imshow(weight, cmap=&quot;seismic&quot;) ax = plt.gca().axes ax.get_xaxis().set_visible(0) ax.get_yaxis().set_visible(0) . Here the colors are weights with red meaning positive and blue meaning negative values. Note how the weights of some of the digits (0, 1, 3, 5, 7, 8) are interpretable. Other digits are more complicated, which might be the reason why the algorithm could not reach very high accuracy. .",
            "url": "https://chongchonghe.github.io/computational-science/machine%20learning/python/jupyter/2022/08/01/ML-from-scratch.html",
            "relUrl": "/machine%20learning/python/jupyter/2022/08/01/ML-from-scratch.html",
            "date": " • Aug 1, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://chongchonghe.github.io/computational-science/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://chongchonghe.github.io/computational-science/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://chongchonghe.github.io/computational-science/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://chongchonghe.github.io/computational-science/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}